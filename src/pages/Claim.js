import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Header from "../components/myHeader.jsx";
import Header1 from "../components/Header.jsx";
const inter = Inter({ subsets: ["latin"] });
const logo = require("../images/cake-busd.png");
const logo1 = require("../images/busd-icon.png");
const logo2 = require("../images/level-icon.png");
import ExampleHeader from "@/components/thheader.jsx";
import ExampleModal from "@/components/mymodal.jsx";
import ExampleB from "@/components/abutton.jsx";
import ExampleA from "@/components/bbutton.jsx";
import ExampleFF from "@/components/footer.jsx";
import Example from "@/components/MyChart.jsx";
import ExampleC from "@/components/Chart2.jsx";
import {
  useContractRead,
  WagmiConfig,
  useContractWrite,
  usePrepareContractWrite,
  useWaitForTransaction,
  useAccount,
} from "wagmi";
import { watchBlockNumber } from "@wagmi/core";
import MyDropDown from "@/components/dropdown.jsx";
import { Fragment, useState, useEffect } from "react";
import { Listbox, Transition } from "@headlessui/react";
import { CheckIcon, ChevronUpDownIcon } from "@heroicons/react/20/solid";
import ZapperDepositModal from "@/components/ZapperModal.jsx";
import ClaimLevelABI from "@/constants/ClaimLevelABI.json";
import toast, { Toaster } from "react-hot-toast";
import { ethers } from "ethers";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
const people = [
  { name: "BUSD" },
  { name: "ETH" },
  { name: "WBNB" },
  { name: "ARB" },
  { name: "USDC" },
  { name: "DAI" },
];
const people1 = [
  { name: "BUSD" },
  { name: "ETH" },
  { name: "WBNB" },
  { name: "ARB" },
  { name: "USDC" },
  { name: "DAI" },
];
export default function Claim() {
  const [releasable, setReleasable] = useState(0);
  const { address, isConnecting, isDisconnected } = useAccount();

  const releasableRead = useContractRead({
    address: "0x66fe48e83F12310467D2f6fb42E582fb770F59cA",
    abi: ClaimLevelABI,
    functionName: "releasable",
    chainId: 421613,
    args: ["0x6DF201B1971BFF91fafE5c10A3eE3423AB2abF4d", address],
    watch: true,
    onSuccess(data) {
      console.log("Success", data);
    },
  });
  const notify2 = () => toast(<div> Transaction sent! </div>);
  const notify1 = () =>
    toast(
      <div>
        <div> Succesfully claimed LEVEL! </div>{" "}
        <a href={`https://arbiscan.io/tx/${data?.hash}`} className="underline">
          arbiscan
        </a>
      </div>
    );
  const notify3 = () =>
    toast.error(
      <div>
        {" "}
        <div>Something went horrible !</div>
        <a href={`https://arbiscan.io/tx/${data?.hash}`} className="underline">
          arbiscan
        </a>
      </div>
    );
  const { config, error, refetch } = usePrepareContractWrite({
    address: "0x66fe48e83F12310467D2f6fb42E582fb770F59cA",
    abi: ClaimLevelABI,
    functionName: "release",
    chainId: 421613,
    args: ["0x6DF201B1971BFF91fafE5c10A3eE3423AB2abF4d", address],
  });
  const { write, isSuccess, data, isLoading, reset, writeAsync } =
    useContractWrite({
      ...config,
      onSuccess: notify2,
    });

  const { isSuccess: finished } = useWaitForTransaction({
    chainId: 42161,
    hash: data?.hash,
    onSuccess: notify1,
    onError: notify3,
  });

  const unwatch = watchBlockNumber(
    {
      chainId: 421613,
    },
    (blockNumber) => console.log(blockNumber)
  );

  async function updateUI() {
    try {
      const rdep = (releasableRead.data || 0).toString();
      setReleasable(ethers.utils.formatEther(rdep));
    } catch {}
  }
  useEffect(() => {
    updateUI();
  }, [unwatch]);
  const handleClick = () => {
    toast.promise(writeAsync?.(), {
      loading: "Claiming...",
      success: <b>Settings saved!</b>,
      error: <b>Could not claim.</b>,
      idle: <div>boring</div>,
    });
  };

  return (
    <>
      <Head>
        <title>Lodge Capital</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[url('https://cdn.discordapp.com/attachments/943951700379721740/1075814264163541122/lodge-bg.png')] w-screen  min-h-screen  bg-no-repeat bg-cover bg-center ">
        <ExampleHeader />

        <div className="text-white  flex flex-col ">
          <div className="flex-auto mt-12 font-lodge text-5xl  text-center ">
            CLAIM YOUR LEVEL
          </div>
          <div className="flex-auto font-lodge mt-20 text-xl col-start-9 col-span-2 row-start-3 text-center "></div>

          <div className=" mx-8 rounded-xl text-black self-center px-12 opacity-70 sm:px-40 pb-20 mb-20 text-center flex-auto bg-white  ">
            {" "}
            <div className="text-lg m-2">
              <div className=" text-center content-center items-center place-self-center inline-flex justify-center">
                <img
                  className="text-center h-24 bg-white rounded-full"
                  src={
                    "https://media.tenor.com/9SQD7cT_c2sAAAAd/lodgecapital.gif?speed=0"
                  }
                  playbackspeed={2}
                />
              </div>
              <div className="">
                <button
                  onClick={() => handleClick?.()}
                  className="text-xl text-center justify-self-center flex-auto mt-12    rounded-lg p-0.5 px-20 sm:px-2 bg-black hover:scale-110 text-white border-2 border-white  hover:bg-white hover:text-black hover:border-2 hover:border-black  transition duration-300 ease-in-out"
                >
                  claim
                </button>{" "}
              </div>
            </div>
            <div className="text-lg m-2 mt-10">
              LEVEL Claimable: {parseFloat(releasable).toLocaleString()}{" "}
            </div>
            <div className="flex-auto m-2"></div>
          </div>
          <Toaster />
        </div>

        <ExampleFF className="sticky top-[100vh]" />
      </main>
    </>
  );
}
